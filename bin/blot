#! /usr/bin/env node

'use strict'

var blot = require('../../lib/blot')
var colors = require('colors')
var program = require('commander')
var _ = require('lodash')

var config = {}

// CLI Actions and Commands

function loadConfig(env, cmd) {
  return new Promise(function(resolve) {
    info('env:load', env)

    config.inFiles = cmd.inFiles // FIXME - map io properly to env.Config
    config.inData  = cmd.inData
    config.outFile = cmd.outFile
    config.echo    = cmd.echo
    config.logging = cmd.log
    config.pretty  = cmd.pretty

    // use environment project config
    if (blot.env.Config.isProject(env)) {
      resolve(
        blot.env.Config
          .loadProject(env, config)
          .then(function(envConfig) {
            info('env:name', envConfig.name)
            info('env:host', envConfig.host)

            blot.env.use(envConfig)
          })
      )
    } else {
      resolve(false)
    }
  })
}

function parseFiles(files) {
  info('glob', 'start')

  return blot.io
    .glob(files)
    .then(function(blueprints) {
      info('glob', 'end')

      blueprints.forEach(function(blueprint) {
        section(blueprint.compiled.markdown)
      })

      return blueprints
    })
    .catch(error)
}

function parseText(data) {
  info('read', 'start')

  return blot.io.read(data)
    .then(function(blueprint) {
      info('read', 'end')

      section(blueprint.compiled.markdown)

      return blueprint
    })
    .catch(error)
}

function compileInputs() {
  return new Promise(function(resolve, reject) {
    var curEnv  = blot.env.current()
    var validFs = config.inFiles && config.inFiles !== 'files'
    var loadFs  = curEnv.isProject && curEnv.docs.src

    if (validFs || loadFs) {
      parseFiles(config.inFiles)
        .then(resolve)
        .catch(reject)
    } else if (config.inData) {
      parseText(config.inData)
        .then(resolve)
        .catch(reject)
    } else {
      error('malformed command')
      reject(false)
    }
  })
}

function renderBlueprints(blueprints) {
  info('render', 'start')

  return new Promise(function(resolve, reject) {
    blot.html.Document
      .fromBlueprints(blueprints)
      .then(function(docs) {
        return Promise.all(_.map(docs, function(doc) {
          return doc.filtered.html()
        }))
      })
      .then(function(docs) {
        info('render', 'end')

        if (_.isEmpty(docs) || _.isNull(docs[0])) {
          warn('render', 'no resulting HTML, check `elements` configuration')
        }

        docs.forEach(section)

        resolve(blueprints)
      })
      .catch(function(error) {
        error('failed to render API blueprint as HTML: ' + error)
        reject(error)
      })
  })
}

function exportBlueprints(blueprints) {
  var curEnv   = blot.env.current().docs
  var validOut = !config.outFile || config.outFile == 'file'
  var doExport = curEnv.isProject && curEnv.export && curEnv.dest
  var outPath  = doExport ? curEnv.docs.dest + '/' + config.inFiles : config.outFile

  if (!doExport && validOut)
    return

  info('export', 'start')

  blueprints.forEach(function(blueprint) {
    blot.io
      .dest(blueprint, outPath)
      .then(function(content) {
        info('export', 'end')
      })
      .catch(function(err) {
        error('failed to export ' + outPath + ': ' + err)
      })
  })
}

function exportHtml(htmlDoc) {
  var curEnv   = blot.env.current().view
  var doExport = curEnv.isProject && curEnv.export && curEnv.dest

  if (!doExport) return

  // htmlDoc.dest(null, htmlDoc)
  htmlDoc.dest()
    .then(function(htmlFinal) {
      section(htmlFinal)
    })
    .catch(function(err) {
      error('failed to export ' + outPath + ': ' + err)
    })
}

// Logging

function info(action, msg) {
  if (config.pretty) {
    blot.log().info(action.magenta + ' ' + msg.green)
  } else if (config.log) {
    blot.log().info(action + ': ' + msg)
  }
}

function warn(action, msg) {
  if (config.pretty) {
    blot.log().warn(action.yellow + ' ' + msg.green)
  } else if (config.log) {
    blot.log().warn(action + ': ' + msg)
  }
}

function error(msg) {
  if (config.pretty || config.log) {
    blot.log().error(msg)
  }
}

function section(msg) {
  if (config.pretty) {
    console.log('\n--------------------------------------------------\n'.rainbow)
    console.log(msg.cyan)
    console.log('\n--------------------------------------------------\n'.rainbow)
  } else if (config.log) {
    blot.log().info(msg)
  } else if (config.echo) {
    console.log(msg)
  }
}

// Command Bindings

program
  .version('0.0.3')
  .option('-i, --in-files [files]', 'Source files (*.blot or *.apib)', 'files')
  .option('-d, --in-data [markdown]', 'Read in plain Markdown (UTF-8)', 'markdown')
  .option('-o, --out-file [file]', 'Write result to file(s) (*.apib , *.html or *.json)', 'file')
  .option('-v, --validate', 'Determines if provided content is a valid API Blueprint')
  .option('-c, --config', 'Specify a specific configuration to load, Useful for working with environments.')
  .option('-e, --echo', 'Prints compiled result to stdout')
  .option('-l, --log', 'Enables logging of blot events')
  .option('-p, --pretty', 'Formats results into visually pleasing output')

// Compile

program
  .command('compile [env]')
  .description('process documentation and compiles it into a static format')
  .action(function(env, cmd) {
    loadConfig(env, cmd.parent)
      .then(compileInputs)
      .then(exportBlueprints)
  })

// Render

program
  .command('render [env]')
  .description('processes, compiles, and then renders documentation as HTML')
  .action(function(env, cmd) {
    loadConfig(env, cmd.parent)
      .then(compileInputs)
      .then(renderBlueprints)
      .then(exportHtml)
  })
  
// TODO - query command

program.parse(process.argv)
