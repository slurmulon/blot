#! /usr/bin/env node

'use strict'

var blot = require('../../lib/blot')
var colors = require('colors')
var program = require('commander')

var config = {
  logging: false,
  pretty: false,
}

function info(action, msg) {
  if (config.pretty) {
    console.log('[' + 'blot'.bold.green + '.' + action.magenta + ']', msg)
  } else if (config.logging) {
    console.log('[blot.' + action + ']', msg)
  }
}

function error(msg) {
  if (config.pretty) {
    console.log('[' + 'blot:ERROR'.red + ']', msg)
  } else if (config.logging) {
    console.log('[blot:ERROR]', msg)
  }
}

function section(msg) {
  if (config.pretty) {
    console.log('\n==================================================\n'.rainbow)
    console.log(msg.cyan)
    console.log('\n==================================================\n'.rainbow)
  } else if (config.logging) {
    console.log(msg)
  }
}

program
  .version('0.0.1')
  .command('compile')
  .description('process documentation and compile it into a static format')
  .option('-i, --in-files [files]', 'Source files (*.blot or *.apib)', 'files')
  .option('-d, --in-data [markdown]', 'Read in Markdown (UTF-8)', 'markdown')
  .option('-o, --out-file [file]', 'Write result to file(s) (*.apib , *.html or *.json)', 'file')
  .option('-l, --logging', 'Enables logging of blot events')
  .option('-p, --pretty', 'Formats results into visually pleasing output')
  .action(function(cmd) {
    var inFiles  = cmd.inFiles
    var inData   = cmd.inData
    var outFiles = cmd.outFile
    var logging  = config.logging = !!cmd.logging
    var pretty   = config.pretty  = !!cmd.pretty

    var blotAction = (function() {
      if (inFiles && inFiles !== 'files') {
        info('load', 'loading files...\n')

        return blot.load(inFiles)
          .then(function(blueprint) {
            // blot.toFile() // TODO
          })
          .catch(error)
      } else if (inData) {
        info('load', 'processing API blueprint markdown...\n')
        
        return blot.read(inData)
          .then(function(blueprint) {
            section(blueprint.compiled.markdown)
          })
          .catch(error)
      } else {
        error('malformed command')
      }
    })
    
    blotAction().then()
  })

program.parse(process.argv)
